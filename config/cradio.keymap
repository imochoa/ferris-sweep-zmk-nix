// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

// {{{1 Includes & Defs

// Origin: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/cradio/cradio.keymap

#include <behaviors.dtsi> // https://github.com/zmkfirmware/zmk/blob/main/app/dts/behaviors.dtsi
#include <dt-bindings/zmk/keys.h> // https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/keys.h
#include <dt-bindings/zmk/bt.h> // https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/bt.h


// Enable Mouse
#include <dt-bindings/zmk/pointing.h>

// https://peccu.github.io/zmk-cheat-sheet/
// https://franknoirot.co/posts/ferris-sweep-keyboard-layout
// https://github.com/benvallack/zmk-config/blob/master/config/cradio.keymap
//
// https://zmk.dev/docs/keymaps/list-of-keycodes
// auto-layer https://github.com/urob/zmk-auto-layer
// switch out of a layer automatically when pressing an unrelated key (e.g. number layer when not pressing a num)

// Vim hjkl (L,Down,Up,R)
//
// Kinesis
//
// LEFT
// Shift  
// LEFT THUMB Ctrl Alt Back Del
//
// RIGHT
// Shift
// RIGHT THUMB Alt Ctrl Enter Space (windows)

        // To flash:
        // 2x reset OR Bootloader 

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT  k2  &ht LCTRL k3  &ht LGUI  k4
#define HRMR(k1,k2,k3,k4) &ht RGUI  k1  &ht RCTRL k2  &ht RALT  k3  &ht RSHFT k4

#define BAS 0
#define SYM 1
#define NUM 2
#define SYS 3

// Unicode keys
// https://askubuntu.com/questions/1171633/i-can-use-alt-x-to-enter-unicode-on-an-old-machine-how-is-this-possible

// #define EURO 20AC


//╭────┬────┬────┬────┬────╮   ╭────┬────┬────┬────┬────╮
//│ 0  │ 1  │ 2  │ 3  │ 4  │   │ 5  │ 6  │ 7  │ 8  │ 9  │
//├────┼────┼────┼────┼────┤   ├────┼────┼────┼────┼────┤
//│ 10 │ 11 │ 12 │ 13 │ 14 │   │ 15 │ 16 │ 17 │ 18 │ 19 │
//├────┼────┼────┼────┼────┤   ├────┼────┼────┼────┼────┤
//│ 20 │ 21 │ 22 │ 23 │ 24 │   │ 25 │ 26 │ 27 │ 28 │ 29 │
//╰────┴────┴────┼────┼────┤   ├────┼────┼────┴────┴────╯
//               │ 30 │ 31 │   │ 32 │ 33 │
//               ╰────┴────╯   ╰────┴────╯


// rango keyboard toggle with ctrl-shift-5

// {{{1 TREE



/ {
// |  {{{1 Combos
// https://zmk.dev/docs/keymaps/combos
    combos {
        compatible = "zmk,combos";
        // Keys
        combo_esc {
            key-positions = <10 19>; // INPUT
            timeout-ms = <50>;
            layers = < BAS SYM >;
            bindings = <&kp ESC>; // OUTPUT
        };
        combo_windows {
            key-positions = <13 16>;
            timeout-ms = <50>;
            layers = < BAS SYM >;
            bindings = <&kp LWIN>;
        };

        // Layers
        // gaming_layer_toggle {
        //     key-positions = <0 10 20>;
        //     timeout-ms = <50>;
        //     layers=<BAS GAM>;
        //     bindings = <&tog GAM>;
        // };
        combo_to_sys_layer {
            timeout-ms = <50>;
	        key-positions = <4 14 24>;
            layers=<BAS SYS>;
            bindings = <&to SYS>;
        };
        // combo_to_base_layer {
        //     timeout-ms = <50>;
	    //     key-positions = <31 32>;
        //     layers=<SYM NUM SYS>;
        //     bindings = <&to BAS>;
        // };
        // combo_to_sym_layer {
        //     timeout-ms = <50>;
	    //     key-positions = <31 33>;
        //     layers = <BAS NUM>;
        //     bindings = <&to SYM>;
        // };
        // combo_to_num_layer {
        //     timeout-ms = <50>;
	    //     key-positions = <30 32>;
        //     layers = <BAS SYM>;
        //     bindings = <&to NUM>;
        // };
    };

// |  {{{1 Macros
// https://zmk.dev/docs/keymaps/behaviors/macros
    macros {
        dodgeslide: dodgeslide {
            label = "Darktide Dodge Slide";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>; // Number of arguments
            wait-ms = <40>;
            bindings
                = <&macro_tap &kp TAB>
                , <&macro_wait_time 200>
                , <&macro_tap &kp LCTRL>
                ;
        };

        // // 2 params macro
        // my_two_param_macro: my_two_param_macro {
        //     // ...
        //     compatible = "zmk,behavior-macro-two-param";
        //     #binding-cells = <2>; // Must be 2
        //     bindings = /* ... */;
        // };

        // euro macro
        // 2 params macro
        euro_macro: euro_macro {
            label = "euro macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>; // Must be 2
            bindings
                    = <&macro_press   &kp LCTRL>
                    , <&macro_press   &kp LSHFT>
                    , <&macro_tap     &kp U &kp N2 &kp N0 &kp A &kp C &kp ENTER >
                    , <&macro_release &kp LCTRL>
                    , <&macro_release &kp LSHFT>
                    ;
        };
    };
  
// |  {{{1 Behaviors
// https://zmk.dev/docs/keymaps/behaviors#key-press-behaviors
// https://zmk.dev/docs/keymaps/behaviors#user-defined-behaviors
    behaviors {
        // [if HELD] if PRESSED {TAPPED}
        // key press &kp KEY
        // tap dance &td0 KEY1 KEY2 KEY3
        // mod-tap &mt [MODIFIER] KEY
        // layer-tap &lt [LAYER] KEY
        // momentary layer &mo [LAYER]
        // to layer &to LAYER
        // toggle layer &tog LAYER
        // sticky key &sk MODIFIER
        // sticky layer &sl LAYER
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE";
            #binding-cells = <0>; // No inputs
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp N2>, <&kp N3>; // outputs
        };
        // td_currency: td_currency {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAPDANCE Currency";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <150>;
        //     // quick-tap-ms = <0>;
        //     // flavor="tap-preferred";
        //     bindings = <&kp DOLLAR>, <&euro_macro>;
        // };
    };

// |  {{{1 conditional-layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
//        tri_layer {
//            if-layers = <SYM LEF>;
//            then-layer = <TRI>;
//        };
    };

    // #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT  k2  &ht LCTRL k3  &ht LGUI  k4
    // #define HRMR(k1,k2,k3,k4) &ht RGUI  k1  &ht RCTRL k2  &ht RALT  k3  &ht RSHFT k4
    

// |  {{{1 Keymap
    keymap {
        compatible = "zmk,keymap";
        // {{{1 LAYER 0 -> BASE
        default_layer { 
            display-name = "Base";
            bindings = <
            &kp Q   &kp W   &kp E        &kp R         &kp T             &kp Y        &kp U      &kp I      &kp O      &kp P
            &ht LSHIFT  A   &ht LALT S   &ht LCTRL D  &ht LGUI  F        &kp G          &kp H   &ht RGUI  J  &ht RCTRL K   &ht RALT  L   &ht RSHIFT SEMI
            &kp Z   &kp X   &kp C        &kp V         &kp B             &kp N        &kp M      &kp COMMA &kp DOT  &mt BSLH FSLH
                                         &to SYM       &sk RCTRL       &sk RSHIFT   &kp SPACE   
            >;
        };

        // {{{1 LAYER 1 -> SYMBOL
        symbols_layer {
            display-name = "Symbols";
            bindings = <
            &kp ESC        &kp AT          &kp HASH        &kp DOLLAR      &kp PRCNT      &kp CARET &kp AMPS       &kp STAR       &mt UNDER MINUS &kp BKSP
            &ht LSHIFT TAB  &ht LALT GRAVE  &ht LCTRL LBKT  &ht LGUI  RBKT  &kp EQUAL       &kp BSLH  &ht RGUI LPAR  &ht RCTRL RPAR  &ht RALT SQT         &ht RSHIFT  ENTER
            &none          &kp EXCL            &none          &none        &none              &none    &none         &none         &kp QMARK      &kp DEL
                                                           &to NUM       &sk RCTRL         &sk RSHIFT   &to BAS   
            >;
        }; 

        // {{{1 LAYER 2
        num_layer {
            display-name = "Numbers";
            bindings = <
        		&none   &none    &none        &none         &none 	         	&kp MINUS  &kp N7       &kp N8      &kp N9    &kp BKSP
        		&ht LSHIFT  TAB  &ht LALT EQUAL &ht LCTRL LBKT &ht LGUI  RBKT  &kp PIPE   	    &kp EQUAL  &ht RGUI N4  &ht RCTRL N5 &ht RALT  N6    &ht RSHIFT ENTER
        		&none   &none    &none        &none         &none   	        &kp N0     &kp N1       &kp N2       &kp N3   &none
                                         &to SYM       &sk RCTRL       &sk RSHIFT   &to BAS   
		        >;
        };
        // left_layer {
        //     display-name = "Left Layer";
        //     bindings = <
        //     &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
        //     &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
        //     &trans     &trans     &trans     &trans     &trans         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans
        //                                      &trans     &trans         &trans     &trans
        //     >;
        // };

        // {{{1 LAYER 3
        sys_layer {
            display-name = "System";
            bindings = <
            &bootloader  &none     &none           &none          &sys_reset          &sys_reset   &none        &none        &none    &bootloader
            &none       &none     &bt BT_SEL 1     &bt BT_SEL 0    &none              &none       &bt BT_SEL 2  &bt BT_SEL 3  &none    &none
            &none       &none     &none           &none          &bt BT_CLR          &none       &none        &none        &none    &studio_unlock
                                                     &to BAS         &none              &none       &none
            >;
        };

        // {{{1 LAYER 4


        // nav_layer {
        //     display-name = "Nav";
        //     bindings = <
        // 		// &trans  &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &trans
        // 		// &kp F1 &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER 
        // 		// &td LG(GRAVE) GRAVE &mkp RCLK  &mwh SCROLL_UP &mwh SCROLL_DOWN &trans   				&mkp LCLK &kp PG_DN  &kp K_VOL_DN  &trans &trans   
        // 		// 			 &to 0 &trans  					&sk RALT &to 1 
		//         >;
        // };

        // {{{1 LAYER 5

        // // {{{1 LAYER 6
        // gaming_layer {
        //     display-name = "Gaming";
        //     bindings = < 
        //     &kp N1    &kp N2 &kp N3 &kp N4      &kp N5       &trans &trans &trans &trans &trans
        //     &kp LSHFT &kp A  &kp W  &kp D       &kp R        &trans &trans &trans &trans &trans 
        //     &kp LCTRL &kp G  &kp S  &kp E       &kp F        &trans &trans &trans &trans &trans 
        //                             &dodgeslide &kp SPACE    &trans &trans
        //     >; // &mkp MB3 // mouse button 3
        // };
    };
};

// {{{1 Reference

// &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
// &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans 
// &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans 
//                      &trans &trans &trans &trans


// vim:fdm=marker:fen:fdl=0:
